<!DOCTYPE html>
<html>
<head>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
          integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
          crossorigin="" />
    
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
            integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
            crossorigin="">
    </script>
</head>
<body>
    <div id="mapid"></div>
    <div id="all-buttons">
        <input type="button" value="Construire des points" id="set-points-button" />
        <input type="button" value="Supprimer les points" id="remove-points-button" />
        <input type="button" value="Tracer le front de feu" id="get-ff-button" />
        <input type="button" value="Envoyer le front de feu" id="send-ff-button" />
        <input type="button" value="Tracer le rectangle" id="create-rectangle-button" />
        <input type="button" value="Supprimer les rectangles" id="remove-rectangles-button" />
    </div>
    <div id="indication-rectangle">
        <p><center>Appuyez sur deux endroits de la carte pour former le rectangle</center></p>
    </div>
    
    <script type="text/javascript">
        var mymap = L.map('mapid').setView([43.3, 5.37], 13);

        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox/satellite-v9',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: 'pk.eyJ1Ijoic2VpbGUiLCJhIjoiY2toaTZ5eDc3MTJycTJxbnd2amxtbWRkcyJ9.ZpJUGzOfC4drrUzCxr8g8w'
        }).addTo(mymap);

        var allPointsObjArray = []; // for points objects
        var allPointsGeoJsonArray = []; // for readable geoJson points
        var pointsForRectangle = [];
        var frontLine; // Ligne représentant le front de feu
        var layerAddPoints;
        var layerGroup = new L.LayerGroup();
        var layerRectangleGroup = new L.LayerGroup();
        var indicationRectangle = document.getElementById("indication-rectangle");
        indicationRectangle.hidden = true;
        layerGroup.addTo(mymap);
        layerRectangleGroup.addTo(mymap);

        // Fonction pour créer des points
        function onMapClick(e) {
            var geojsonFeature = {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "type": "Point",
                    "coordinates": [e.latlng.lat, e.latlng.lng]
                }
            }

            var point;
            layerAddPoints = L.geoJson(geojsonFeature, {
                pointToLayer: function (feature, latlng) {
                    point = L.circle(e.latlng, {
                        color: 'red',
                        fillColor: '#f03',
                        fillOpacity: 0.5,
                        radius: 30,
                        draggable: true,
                    }).bindPopup("<input type='button' value='Supprimer ce point' id='point-delete-button'/>");
                    point.on("click", onPointClick);
                    allPointsObjArray.push(point);
                    allPointsGeoJsonArray.push(JSON.stringify(point.toGeoJSON()));
                    return point;
                }
            });
            layerGroup.addLayer(layerAddPoints);
        }
        var button = document.getElementById("set-points-button");
        $('#set-points-button').on("click", function () {
            if (button.value === 'Construire des points') {
                mymap.on('click', onMapClick);
                button.value = 'Arrêter';
            }
            else {
                mymap.off('click', onMapClick);
                button.value = 'Construire des points';
            }
        });

        // Prépare points rectangle 
        function setRectangle() {
            var allButtons = document.getElementById("all-buttons");
            allButtons.hidden = true;
            indicationRectangle.hidden = false;
            mymap.on('click', pointsRectangle);          
        }
        $("#create-rectangle-button").on("click", setRectangle);

        // Point click pour rectangle
        function pointsRectangle(e) {
            var allButtons = document.getElementById("all-buttons");
            point = L.circle(e.latlng);
            pointsForRectangle.push(point);

            if (pointsForRectangle.length == 2) {
                createRectangle(pointsForRectangle[0]._latlng, pointsForRectangle[1]._latlng);
                mymap.off("click", pointsRectangle);
                indicationRectangle.hidden = true;
                allButtons.hidden = false;
                pointsForRectangle = [];
            }
        }


        // Construit un rectangle dans la map et zoom dessus
        function createRectangle(p1, p2) {
            // define rectangle geographical bounds
            var bounds = [[p1.lat, p1.lng], [p2.lat, p2.lng]];

            // create an orange rectangle
            var rectangle = L.rectangle(bounds, { color: "#ff7800", weight: 1 });
            layerRectangleGroup.addLayer(rectangle);

            // zoom the map to the rectangle bounds
            mymap.fitBounds(bounds);
        }
        
        // Supprimer les rectangles
        function deleteRectangles() {
            mymap.removeLayer(layerRectangleGroup);
            layerRectangleGroup = new L.LayerGroup();
            layerRectangleGroup.addTo(mymap);
        }
        $("#remove-rectangles-button").on("click", deleteRectangles)

        // fonction pour supprimer les points en cliquant sur leur popup
        function onPointClick() {

            var tempPoint = this;

            $("#point-delete-button:visible").click(function () {
                var index = allPointsObjArray.indexOf(tempPoint);
                allPointsObjArray.splice(index, 1);
                allPointsGeoJsonArray.splice(index, 1);
                mymap.removeLayer(tempPoint);
            });
        }

        // fonction pour supprimer tous les points
        function deleteAllPoints() {
            allPointsGeoJsonArray = [];
            allPointsObjArray = [];
            mymap.removeLayer(layerGroup);
            layerGroup = new L.LayerGroup();
            layerGroup.addTo(mymap);
        }
        $('#remove-points-button').on("click", deleteAllPoints);

        // On retourne les coordonnées des points 1 par 1
        function getAllPoints() {
            allPointsObjArray.forEach((point) => {
                alert(point.latlng);
            });
        }
        $("#get-points-button").on("click", getAllPoints);

        // Traçage du front de feu
        function getFireFront() {
            if (frontLine != undefined) {
                mymap.removeLayer(frontLine);
            }
            if (allPointsObjArray.length >= 2) {
                var fireFrontCoords = [];
                for (var i = 0; i < allPointsObjArray.length; i++) {
                    var lat = allPointsObjArray[i]._latlng.lat;
                    var lng = allPointsObjArray[i]._latlng.lng;
                    fireFrontCoords.push([lat, lng]);
                }
                frontLine = L.polyline(fireFrontCoords, { color: "blue" });
                frontLine.addTo(mymap);
                //frontLine.JSON.stringify(); // Pour transformer frontLine en JSON
            }
        }

        $("#get-ff-button").on("click", getFireFront);

        function postFireFront() {
            $.post("api/FireFront", JSON.stringify(frontLine._latlngs), function () {
                alert("Succes de la requete POST")
            }, "json")
        }

        $("#send-ff-button").on("click", postFireFront);



    </script>
</body>
</html>